@prefix rdfcv: <http://www.dr-thomashartmann.de/phd-thesis/rdf-validation/vocabularies/rdf-constraints-vocabulary#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix dcterms: <http://purl.org/dc/terms#> .
@prefix : <http://example.com/constraints#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#>.
@prefix e: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix math: <http://www.w3.org/2000/10/swap/math#> .
@prefix func: <http://www.w3.org/2007/rif-builtin-function#> .
@prefix pred: <http://www.w3.org/2007/rif-builtin-predicate#> .
@prefix prolog: <http://eulersharp.sourceforge.net/2003/03swap/prolog#>.
@prefix string: <http://www.w3.org/2000/10/swap/string#> .
@base <http://example.com/constraints#> .



{
?constraint a rdfcv:SimpleConstraint ;
  :constraintType :NegativeLiteralPatternMatching ; 
  rdfcv:constrainingElement :negative_literal_pattern_matching ;
  rdfcv:leftProperties ?property ;
  rdfcv:contextClass  ?class ;
  rdfcv:classes ?lit ;
  rdfcv:constrainingValue ?string .
  
  ?x a ?class.
  ?x ?property ?v.
  (?some ?lit) log:dtlit ?v .
  ?v string:matches ?string.

}
=>
{
_:x a :constraintViolation;
    :violatedConstraint ?constraint;
    :class ?class;
    :instance ?x;
    :property ?property;
    :value ?v;
    :matches ?string.
}.








