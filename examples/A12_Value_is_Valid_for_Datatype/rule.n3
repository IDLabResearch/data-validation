@prefix rdfcv: <http://www.dr-thomashartmann.de/phd-thesis/rdf-validation/vocabularies/rdf-constraints-vocabulary#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix dcterms: <http://purl.org/dc/terms#> .
@prefix : <http://example.com/constraints#> .
@prefix list: <http://www.w3.org/2000/10/swap/list#>.
@prefix e: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix math: <http://www.w3.org/2000/10/swap/math#> .
@prefix func: <http://www.w3.org/2007/rif-builtin-function#> .
@prefix pred: <http://www.w3.org/2007/rif-builtin-predicate#> .
@prefix prolog: <http://eulersharp.sourceforge.net/2003/03swap/prolog#>.
@prefix string: <http://www.w3.org/2000/10/swap/string#> .
@base <http://example.com/constraints#> .



{
?constraint a rdfcv:SimpleConstraint ;
  :constraintType :ValueIsValidForDatatype ;
  rdfcv:constrainingElement :value-is-valid-for-datatype ;
  rdfcv:contextClass  ?c ;
  rdfcv:leftProperties ?p ;
  rdfcv:classes ?dc .
?x a ?c.
?x ?p ?v.
?v :clashesWith ?dc

}
=>
{
_:x a :constraintViolation;
    :violatedConstraint ?c;
    :subject ?x;
    :property ?p;
    :value ?v;
    :datatype ?dc
}.




#here we have rules for datatype clashes, we support xsd:nonNegativeInteger, xsd:integer, xsd:date, others can be added

#case ?x is not even a literal
{
?x :clashesWith ?y
}
<=
{
?x log:rawType ?type.
?type log:notEqualTo rdfs:Literal.
}.


#xsd:nonNegativeInteger
{
?x :clashesWith xsd:nonNegativeInteger
}
<=
{
?x math:lessThan 0.
}.

{
?x :clashesWith xsd:nonNegativeInteger
}
<=
{
?x :clashesWith xsd:integer
}.

#xsd:integer
{
?x :clashesWith xsd:integer
}
<=
{
?x math:rounded ?u.
?u log:notEqualTo ?x.
}.

# xsd:date
{
?x :clashesWith xsd:date
}
<=
{
(?x ?x) pred:date-equal true.
() prolog:cut true.
() prolog:fail true.
}.

{
?x :clashesWith xsd:date
}
<= {}.


