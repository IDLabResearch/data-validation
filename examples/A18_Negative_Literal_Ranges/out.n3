#Processed by EYE rel. v17.0131.1345 josd
#eye data.ttl constraint.ttl rule.n3 --query ../query.n3

PREFIX rdfcv: <http://www.dr-thomashartmann.de/phd-thesis/rdf-validation/vocabularies/rdf-constraints-vocabulary#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dcterms: <http://purl.org/dc/terms#>
PREFIX : <http://example.com/constraints#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX math: <http://www.w3.org/2000/10/swap/math#>
PREFIX list: <http://www.w3.org/2000/10/swap/list#>
PREFIX e: <http://eulersharp.sourceforge.net/2003/03swap/log-rules#>
PREFIX log: <http://www.w3.org/2000/10/swap/log#>
PREFIX func: <http://www.w3.org/2007/rif-builtin-function#>
PREFIX pred: <http://www.w3.org/2007/rif-builtin-predicate#>
PREFIX prolog: <http://eulersharp.sourceforge.net/2003/03swap/prolog#>
PREFIX string: <http://www.w3.org/2000/10/swap/string#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX r: <http://www.w3.org/2000/10/swap/reason#>

[] a r:Proof, r:Conjunction;
  r:component <#lemma1>;
  r:component <#lemma2>;
  r:component <#lemma3>;
  r:component <#lemma4>;
  r:component <#lemma5>;
  r:component <#lemma6>;
  r:component <#lemma7>;
  r:component <#lemma8>;
  r:gives {
    _:sk_0 a :constraintViolation.
    _:sk_0 :violatedConstraint :example_constraint_A18.
    _:sk_0 :violatedConstraint :example_constraint_A18a.
    _:sk_0 :constrainingElement xsd:minInclusive.
    _:sk_0 :constrainingElement xsd:maxInclusive.
    _:sk_0 :property :latitude.
    _:sk_0 :value "190"^^xsd:nonNegativeInteger.
    _:sk_0 :restriction (181 360).
  }.

<#lemma1> a r:Inference; 
  r:gives {
    _:sk_0 a :constraintViolation.
  }; 
  r:evidence (
    <#lemma9>
    <#lemma9>
  );
  r:rule <#lemma10>.

<#lemma2> a r:Inference; 
  r:gives {
    _:sk_0 :violatedConstraint :example_constraint_A18.
  }; 
  r:evidence (
    <#lemma9>
    <#lemma9>
  );
  r:rule <#lemma10>.

<#lemma3> a r:Inference; 
  r:gives {
    _:sk_0 :violatedConstraint :example_constraint_A18a.
  }; 
  r:evidence (
    <#lemma9>
    <#lemma9>
  );
  r:rule <#lemma10>.

<#lemma4> a r:Inference; 
  r:gives {
    _:sk_0 :constrainingElement xsd:minInclusive.
  }; 
  r:evidence (
    <#lemma9>
    <#lemma9>
  );
  r:rule <#lemma10>.

<#lemma5> a r:Inference; 
  r:gives {
    _:sk_0 :constrainingElement xsd:maxInclusive.
  }; 
  r:evidence (
    <#lemma9>
    <#lemma9>
  );
  r:rule <#lemma10>.

<#lemma6> a r:Inference; 
  r:gives {
    _:sk_0 :property :latitude.
  }; 
  r:evidence (
    <#lemma9>
    <#lemma9>
  );
  r:rule <#lemma10>.

<#lemma7> a r:Inference; 
  r:gives {
    _:sk_0 :value "190"^^xsd:nonNegativeInteger.
  }; 
  r:evidence (
    <#lemma9>
    <#lemma9>
  );
  r:rule <#lemma10>.

<#lemma8> a r:Inference; 
  r:gives {
    _:sk_0 :restriction (181 360).
  }; 
  r:evidence (
    <#lemma9>
    <#lemma9>
  );
  r:rule <#lemma10>.

<#lemma9> a r:Inference; 
  r:gives {
    _:sk_0 a :constraintViolation.
    _:sk_0 :violatedConstraint :example_constraint_A18.
    _:sk_0 :violatedConstraint :example_constraint_A18a.
    _:sk_0 :constrainingElement xsd:minInclusive.
    _:sk_0 :constrainingElement xsd:maxInclusive.
    _:sk_0 :property :latitude.
    _:sk_0 :value "190"^^xsd:nonNegativeInteger.
    _:sk_0 :restriction (181 360).
  }; 
  r:evidence (
    <#lemma11>
    <#lemma12>
    <#lemma13>
    <#lemma14>
    <#lemma15>
    <#lemma16>
    <#lemma17>
    <#lemma18>
    <#lemma19>
    <#lemma20>
    <#lemma21>
    <#lemma22>
    <#lemma23>
    <#lemma24>
    <#lemma25>
    <#lemma26>
    <#lemma27>
    [ a r:Fact; r:gives {("190" xsd:nonNegativeInteger) log:dtlit "190"^^xsd:nonNegativeInteger}]
    <#lemma28>
  );
  r:rule <#lemma29>.

<#lemma10> a r:Extraction; 
  r:gives {
    {?x_0_1 a :constraintViolation.
      ?x_0_1 ?x_1_1 ?x_2_1} => {?x_0_1 ?x_1_1 ?x_2_1}.
  };
  r:because [ a r:Parsing; r:source <file:///media/doerthe/4EC6F987C6F97017/store/RDF-Valdation/Val/constraint-rules/examples/query.n3>].

<#lemma11> a r:Extraction; 
  r:gives {
    :example_constraint_A18 a rdfcv:SimpleConstraint.
  };
  r:because [ a r:Parsing; r:source <file:///media/doerthe/4EC6F987C6F97017/store/RDF-Valdation/Val/constraint-rules/examples/A18_Negative_Literal_Ranges/constraint.ttl>].

<#lemma12> a r:Extraction; 
  r:gives {
    :example_constraint_A18 :relatedTo :example_constraint_A18a.
  };
  r:because [ a r:Parsing; r:source <file:///media/doerthe/4EC6F987C6F97017/store/RDF-Valdation/Val/constraint-rules/examples/A18_Negative_Literal_Ranges/constraint.ttl>].

<#lemma13> a r:Extraction; 
  r:gives {
    :example_constraint_A18 :constraintType :NegativeLiteralRanges.
  };
  r:because [ a r:Parsing; r:source <file:///media/doerthe/4EC6F987C6F97017/store/RDF-Valdation/Val/constraint-rules/examples/A18_Negative_Literal_Ranges/constraint.ttl>].

<#lemma14> a r:Extraction; 
  r:gives {
    :example_constraint_A18 rdfcv:constrainingElement xsd:minInclusive.
  };
  r:because [ a r:Parsing; r:source <file:///media/doerthe/4EC6F987C6F97017/store/RDF-Valdation/Val/constraint-rules/examples/A18_Negative_Literal_Ranges/constraint.ttl>].

<#lemma15> a r:Extraction; 
  r:gives {
    :example_constraint_A18 rdfcv:contextClass :Spatial-Feature.
  };
  r:because [ a r:Parsing; r:source <file:///media/doerthe/4EC6F987C6F97017/store/RDF-Valdation/Val/constraint-rules/examples/A18_Negative_Literal_Ranges/constraint.ttl>].

<#lemma16> a r:Extraction; 
  r:gives {
    :example_constraint_A18 rdfcv:leftProperties :latitude.
  };
  r:because [ a r:Parsing; r:source <file:///media/doerthe/4EC6F987C6F97017/store/RDF-Valdation/Val/constraint-rules/examples/A18_Negative_Literal_Ranges/constraint.ttl>].

<#lemma17> a r:Extraction; 
  r:gives {
    :example_constraint_A18 rdfcv:classes xsd:nonNegativeInteger.
  };
  r:because [ a r:Parsing; r:source <file:///media/doerthe/4EC6F987C6F97017/store/RDF-Valdation/Val/constraint-rules/examples/A18_Negative_Literal_Ranges/constraint.ttl>].

<#lemma18> a r:Extraction; 
  r:gives {
    :example_constraint_A18 rdfcv:constrainingValue 181 .
  };
  r:because [ a r:Parsing; r:source <file:///media/doerthe/4EC6F987C6F97017/store/RDF-Valdation/Val/constraint-rules/examples/A18_Negative_Literal_Ranges/constraint.ttl>].

<#lemma19> a r:Extraction; 
  r:gives {
    :example_constraint_A18a a rdfcv:SimpleConstraint.
  };
  r:because [ a r:Parsing; r:source <file:///media/doerthe/4EC6F987C6F97017/store/RDF-Valdation/Val/constraint-rules/examples/A18_Negative_Literal_Ranges/constraint.ttl>].

<#lemma20> a r:Extraction; 
  r:gives {
    :example_constraint_A18a :constraintType :NegativeLiteralRanges.
  };
  r:because [ a r:Parsing; r:source <file:///media/doerthe/4EC6F987C6F97017/store/RDF-Valdation/Val/constraint-rules/examples/A18_Negative_Literal_Ranges/constraint.ttl>].

<#lemma21> a r:Extraction; 
  r:gives {
    :example_constraint_A18a rdfcv:constrainingElement xsd:maxInclusive.
  };
  r:because [ a r:Parsing; r:source <file:///media/doerthe/4EC6F987C6F97017/store/RDF-Valdation/Val/constraint-rules/examples/A18_Negative_Literal_Ranges/constraint.ttl>].

<#lemma22> a r:Extraction; 
  r:gives {
    :example_constraint_A18a rdfcv:contextClass :Spatial-Feature.
  };
  r:because [ a r:Parsing; r:source <file:///media/doerthe/4EC6F987C6F97017/store/RDF-Valdation/Val/constraint-rules/examples/A18_Negative_Literal_Ranges/constraint.ttl>].

<#lemma23> a r:Extraction; 
  r:gives {
    :example_constraint_A18a rdfcv:leftProperties :latitude.
  };
  r:because [ a r:Parsing; r:source <file:///media/doerthe/4EC6F987C6F97017/store/RDF-Valdation/Val/constraint-rules/examples/A18_Negative_Literal_Ranges/constraint.ttl>].

<#lemma24> a r:Extraction; 
  r:gives {
    :example_constraint_A18a rdfcv:classes xsd:nonNegativeInteger.
  };
  r:because [ a r:Parsing; r:source <file:///media/doerthe/4EC6F987C6F97017/store/RDF-Valdation/Val/constraint-rules/examples/A18_Negative_Literal_Ranges/constraint.ttl>].

<#lemma25> a r:Extraction; 
  r:gives {
    :example_constraint_A18a rdfcv:constrainingValue 360 .
  };
  r:because [ a r:Parsing; r:source <file:///media/doerthe/4EC6F987C6F97017/store/RDF-Valdation/Val/constraint-rules/examples/A18_Negative_Literal_Ranges/constraint.ttl>].

<#lemma26> a r:Extraction; 
  r:gives {
    :something a :Spatial-Feature.
  };
  r:because [ a r:Parsing; r:source <file:///media/doerthe/4EC6F987C6F97017/store/RDF-Valdation/Val/constraint-rules/examples/A18_Negative_Literal_Ranges/data.ttl>].

<#lemma27> a r:Extraction; 
  r:gives {
    :something :latitude "190"^^xsd:nonNegativeInteger.
  };
  r:because [ a r:Parsing; r:source <file:///media/doerthe/4EC6F987C6F97017/store/RDF-Valdation/Val/constraint-rules/examples/A18_Negative_Literal_Ranges/data.ttl>].

<#lemma28> a r:Inference; 
  r:gives {
    ("190"^^xsd:nonNegativeInteger xsd:minInclusive xsd:maxInclusive 181 360) :negativeLiteralRangeCheck false.
  }; 
  r:evidence (
    [ a r:Fact; r:gives {"190"^^xsd:nonNegativeInteger math:notLessThan 181}]
    [ a r:Fact; r:gives {"190"^^xsd:nonNegativeInteger math:notGreaterThan 360}]
  );
  r:rule <#lemma30>.

<#lemma29> a r:Extraction; 
  r:gives {
    {?x_0_2 a rdfcv:SimpleConstraint.
      ?x_0_2 :relatedTo ?x_1_2.
      ?x_0_2 :constraintType :NegativeLiteralRanges.
      ?x_0_2 rdfcv:constrainingElement ?x_2_2.
      ?x_0_2 rdfcv:contextClass ?x_3_2.
      ?x_0_2 rdfcv:leftProperties ?x_4_2.
      ?x_0_2 rdfcv:classes ?x_5_2.
      ?x_0_2 rdfcv:constrainingValue ?x_6_2.
      ?x_1_2 a rdfcv:SimpleConstraint.
      ?x_1_2 :constraintType :NegativeLiteralRanges.
      ?x_1_2 rdfcv:constrainingElement ?x_7_2.
      ?x_1_2 rdfcv:contextClass ?x_3_2.
      ?x_1_2 rdfcv:leftProperties ?x_4_2.
      ?x_1_2 rdfcv:classes ?x_5_2.
      ?x_1_2 rdfcv:constrainingValue ?x_8_2.
      ?x_9_2 a ?x_3_2.
      ?x_9_2 ?x_4_2 ?x_10_2.
      (?x_11_2 ?x_5_2) log:dtlit ?x_10_2.
      (?x_10_2 ?x_2_2 ?x_7_2 ?x_6_2 ?x_8_2) :negativeLiteralRangeCheck false} => {_:x_12_2 a :constraintViolation.
      _:x_12_2 :violatedConstraint ?x_0_2.
      _:x_12_2 :violatedConstraint ?x_1_2.
      _:x_12_2 :constrainingElement ?x_2_2.
      _:x_12_2 :constrainingElement ?x_7_2.
      _:x_12_2 :property ?x_4_2.
      _:x_12_2 :value ?x_10_2.
      _:x_12_2 :restriction (?x_6_2 ?x_8_2)}.
  };
  r:because [ a r:Parsing; r:source <file:///media/doerthe/4EC6F987C6F97017/store/RDF-Valdation/Val/constraint-rules/examples/A18_Negative_Literal_Ranges/rule.n3>].

<#lemma30> a r:Extraction; 
  r:gives {
    {(?x_0_3 xsd:minInclusive xsd:maxInclusive ?x_1_3 ?x_2_3) :negativeLiteralRangeCheck false} <= {?x_0_3 math:notLessThan ?x_1_3.
      ?x_0_3 math:notGreaterThan ?x_2_3}.
  };
  r:because [ a r:Parsing; r:source <file:///media/doerthe/4EC6F987C6F97017/store/RDF-Valdation/Val/constraint-rules/examples/A18_Negative_Literal_Ranges/rule.n3>].

#2017-02-08T16:38:07.804Z in=21 out=8 ent=16 step=18 brake=2 inf=101683 sec=0.069 inf/sec=1473667
#ENDS

